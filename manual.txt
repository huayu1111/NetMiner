
* A guideline for high-quality gene co-expression network inference based on the large-scale open access RNA-seq dataset

* The inference program can be applied in two different methods: 1) Run using the primary RNA-seq data downloaded from NCBI SRA. 2) Run using gene expression data.

1) Running pipeline using the primary RNA-seq data downloaded from NCBI SRA.

* To run pipeline using the primary RNA-seq data downloaded from NCBI SRA, the users need high-performance computing clusters, Linux and the Portable Batch System (PBS)

* This pipeline depend on the following softwares
1. Perl v5.10.1
2. R-3.0.2
3. fastq-dump (sratoolkit.2.3.2-5)
4. FASTQC V0.10.1 (optional)
5. Trimmomatic-0.32
6. FASTX Toolkit
7. TopHat v2.0.10
8. htseq-count (HTSeq 0.6.1p2)
9. cufflinks v2.1.1
10. R package WGCNA (>= 1.29)
11. R package corpcor (>= 1.6.7)
12. R package bc3net (>= 1.0.2)
13. R package igraph (>= 1.0.1)
14. R package GeneNet (>= 1.2.12)

Step 1. Trimming and filtering RNA-seq short reads
Programs:
multiple_preprocesses.pl
submit_fix_fastx_clean_reads.pl
fix_fastx_clean_reads.pl

Firstly, running the perl script of multiple_preprocesses.pl for reads trimming and filtering
Usage:
perl multiple_preprocesses.pl --runinfofile \$runinfofile --inputpath \$inputpath --outputpath \$outputpath --pbspath \$pbspath --rawfastqpath \$rawfastqpath --fastqcpath \$fastqcpath --cleanpath \$cleanpath --queue \$queue --threads \$threads
Options:
	--runinfofile: NCBI run information file (downloaded from NCBI)
	--inputpath: SRA file path 
	--outputpath: FASTQ file path
	--pbspath: PBS script path
	--rawfastqpath: fastq-dump result file path
	--fastqcpath: fastqc result file path
	--cleanpath: clean result file path
	--queue: PBS queue
	--threads: the number of threads
	--help: display help information

Then, running the perl script of submit_fix_fastx_clean_reads.pl to fix the paired reads
Usage:
perl submit_fix_fastx_clean_reads.pl --cleanpath \$cleanpath --pbspath \$pbspath --queue \$queue --threads \$threads --help \$help
Options: 
--cleanpath: clean file path
--pbspath: PBS script path
--queue: PBS queue
--threads: the number of threads
--help: displaying help information

Step 2. Mapping and calculating gene expression abundance 
Program:
mapping_and_expression_cal.pl

Usage:
perl mapping_and_expression_cal.pl --inputpath \$inputpath --outputpath \$outputpath --indexpath \indexpath --bowtiebase \$bowtiebase --tophatpath \$tophatpath --picardpath \$picardpath --htseqpath \$htseqpath --cufflinkspath \$cufflinkspath --nomultiplehits --removeduplicate --runinfofile \$runinfofile --gfffile \$gfffile --threads \$threads --refgenome \$refgenome --pbspath \$pbspath --help
Options:
--inputpath: input file path
--outputpath: output file path
--indexpath: bowtie index file path
--bowtiebase: bowtie index file basename
--tophatpath: tophat output file path
--picardpath: picard program path
--htseqpath: htseq-count output file path
--cufflinkspath: cufflinks output file path
--nomultiplehit: whether or not contain the multiple hits
--removeduplicate: whether or not remove the duplicate reads
--runinfofile: sequencing run information file
--gfffile: gff annotation file
--queue: computing queue
--threads: the number of threads
--refgenome: reference genome path
--pbspath: PBS script path

Step 3. Inferring individual gene co-expression network Using WGCNA,GGM and BC3NET
Programs:
submit_extract_input_matrix_for_coexpression_inference.pl
extract_input_matrix_for_coexpression_inference.R
infer_initial_coexpression_network.R

Firstly, running the perl script of submit_extract_input_matrix_for_coexpression_inference.pl to construct gene expression matrix
Usage:
perl $0 --inputpath \$inputpath --netfilepath \$netfilepath --runinfofile \$runinfofile --htseqpath \$htseqpath --cufflinkspath \$cufflinkspath --suffix_htseq \$suffix_htseq --suffix_cufflinks \$suffix_cufflinks --help
Options:
--inputpath: input file path
--netfilepath: network file path
--runinfofile: run information file
--htseqpath: relative htseq_count results path 
--cufflinkspath: relative cufflinks results path 
--suffix_htseq: htseq result file suffix
--suffix_cufflinks: cufflinks result file suffix
--queue: PBS queue
--help: displaying help information

Then, running R script of infer_initial_coexpression_network.R to build initial gene co-expression networks
Usage:
Rscript --vanilla infer_initial_coexpression_network.R inference_method expression_data_path threads
Options:
inference_method: network inference method
expression_data_path: gene expression data path
threads: the number of threads

Step 4. Constructing the high-quality network using ensemble-based system
Program:
ensemble_method_for_construction_consensus_network.R
Usage:
Rscript --vanilla /public/Project/Project_YuHua/CoexpressNetwork/Program/networkAnalysis/integrateNetworks.R network_file_path
Options:
network_file_path: the initial network file path

The example outputfile of NetMiner.
gcnet_rice.tab: The rice gene co-expression network constructed by our pipeline
This file includes three columns: The first gene, the second gene and confidence score
